---
import MainLayout from '../layouts/MainLayout.astro';
import '../styles/global.css';
import { getEntry } from 'astro:content';

// Get the article content from the Markdown file
const article = await getEntry('article', 'postautomaten');
const { Content } = await article.render();

// Format the updated date
const lastUpdateTime = article.data.updated;
const formattedDate = new Intl.DateTimeFormat('de-DE', {
  day: '2-digit',
  month: '2-digit',
  year: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
}).format(lastUpdateTime);
---

<MainLayout title="Postautomaten in Deutschland - Eine Visualisierung">
  <div class="flex justify-end pt-6 pb-2">
    <button id="darkModeToggle" class="p-2 rounded-full bg-gray-200 hover:bg-gray-300 transition-colors" aria-label="Toggle dark mode">
      <svg id="moon-icon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
      </svg>
      <svg id="sun-icon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
      </svg>
    </button>
  </div>

  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize dark mode icons based on current theme
      updateDarkModeIcons();
      
      // Apply initial dark mode style if needed
      if (document.documentElement.classList.contains('dark')) {
        let styleEl = document.createElement('style');
        styleEl.id = 'theme-style';
        styleEl.textContent = `
          html { background-color: #121212 !important; }
          body { background-color: #121212 !important; color: #ffffff !important; }
          article { background-color: #1f1f1f !important; }
          p, h1, h2, h3, h4, h5, h6, span { color: #ffffff !important; }
          #darkModeToggle { background-color: #4a4a4a !important; }
          #darkModeToggle svg { color: #ffffff !important; }
          .aspect-\\[16\\/9\\] { background-color: #2a2a2a !important; }
        `;
        document.head.appendChild(styleEl);
      }
      
      // Set up toggle functionality
      document.getElementById('darkModeToggle')?.addEventListener('click', () => {
        // Toggle dark mode
        const isDark = document.documentElement.classList.contains('dark');
        
        // Create a style element for immediate visual feedback
        let styleEl = document.getElementById('theme-style');
        if (!styleEl) {
          styleEl = document.createElement('style');
          styleEl.id = 'theme-style';
          document.head.appendChild(styleEl);
        }
        
        if (isDark) {
          // Switch to light mode
          document.documentElement.classList.remove('dark');
          localStorage.theme = 'light';
          styleEl.textContent = `
            html { background-color: #f8f8f8 !important; }
            body { background-color: #f8f8f8 !important; color: #000000 !important; }
            article { background-color: #ffffff !important; }
            p, h1, h2, h3, h4, h5, h6, span { color: #000000 !important; }
            .aspect-\\[16\\/9\\] { background-color: #f0f0f0 !important; }
          `;
        } else {
          // Switch to dark mode
          document.documentElement.classList.add('dark');
          localStorage.theme = 'dark';
          styleEl.textContent = `
            html { background-color: #121212 !important; }
            body { background-color: #121212 !important; color: #ffffff !important; }
            article { background-color: #1f1f1f !important; }
            p, h1, h2, h3, h4, h5, h6, span { color: #ffffff !important; }
            #darkModeToggle { background-color: #4a4a4a !important; }
            #darkModeToggle svg { color: #ffffff !important; }
            .aspect-\\[16\\/9\\] { background-color: #2a2a2a !important; }
          `;
        }
        
        // Update icons
        updateDarkModeIcons();
      });
    });
    
    // Helper function to update icons based on current theme
    function updateDarkModeIcons() {
      const moonIcon = document.getElementById('moon-icon');
      const sunIcon = document.getElementById('sun-icon');
      
      if (!moonIcon || !sunIcon) return;
      
      if (document.documentElement.classList.contains('dark')) {
        moonIcon.classList.add('hidden');
        sunIcon.classList.remove('hidden');
      } else {
        moonIcon.classList.remove('hidden');
        sunIcon.classList.add('hidden');
      }
    }
  </script>
  
  <div class="py-6">
    <h2>
      <span class="block text-primary-base dark:text-dm-primary-base font-sansUI font-bold lg:text-l md:text-l sm:text-base mb-2">
        {article.data.subtitle}
      </span>
      <span class="font-brandUI font-extrabold lg:text-4xl md:text-3xl sm:text-2xl leading-tight">
        <span class="align-middle">{article.data.title}</span>
      </span>
    </h2>
    
    <div class="RichText RichText--sans leading-loose lg:text-base md:text-base sm:text-base mt-3">
      {article.data.description}
    </div>
    
    <div class="mb-4"></div>
    
    <div class="font-sansUI text-sm text-shade-dark dark:text-shade-light">
      <time class="timeformat" datetime={lastUpdateTime.toISOString()}>
        {formattedDate} Uhr
      </time>
      <span class="ml-2 text-sm">(Letzte Aktualisierung)</span>
    </div>
  </div>
  
  <div class="relative" data-article-el="body">
    <div class="mt-6 pb-8">
      <div data-area="body" class="RichText break-words word-wrap">
        <article class="prose prose-lg dark:prose-invert mx-auto">
          <Content />
        </article>
      </div>
    </div>
  </div>
</MainLayout>